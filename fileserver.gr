// This is a simple Wagi static file server.

import Env from "./lib/env"
import Map from "map"
import Option from "option"
import File from "sys/file"
import String from "string"
import Mediatype from "./lib/mediatype"
import Stringutil from "./lib/stringutil"

let serve = (abs_path) => {
    // Trim the leading /
    let path = String.slice(1, String.length(abs_path), abs_path)
    File.fdWrite(File.stderr, "Fileserver: Loading file ")
    File.fdWrite(File.stderr, path)
    File.fdWrite(File.stderr, "\n")

    // Open file
    // TODO: This throws an error when something goes wrong.
    // But Grain 0.3 does not have a try/catch yet.
    // When we figure out how, we need to catch the error here
    // and do a 404 or 500.
    let input = File.pathOpen(
        File.pwdfd,
        [],
        path,
        [],
        [File.FdRead],
        [],
        [],   
    )

    File.fdWrite(File.stdout, "Content-Type: ")
    File.fdWrite(File.stdout, Mediatype.guess(path))
    File.fdWrite(File.stdout, "\n\n")
    
    // Pipe output to STDOUT
    let rec pipe = (in, out) => {
        let (d, len) = File.fdRead(in, 1024)
        File.fdWrite(out, d)
        if (len > 0) {
            pipe(in, out)
        }
    }
    pipe(input, File.stdout)
    File.fdClose(input)
}

let guestpath = (env) => {

    // Backward compat for an older version of Wagi that had PATH_INFO wrong.
    // X_RELATIVE_PATH was removed before Wagi 0.4
    match (Map.get("X_RELATIVE_PATH", env)) {
        Some(p) => String.concat("/", p),
        None => {
            Option.unwrap(Map.get("PATH_INFO", env))
        }
    }
    
}

let notFound = () => {
    File.fdWrite(File.stdout, "Status: 404\n\nNot Found")
}

let kv = Env.envMap()
let pathInfo = guestpath(kv)
serve(pathInfo)
